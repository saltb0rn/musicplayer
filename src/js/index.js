/*
  This file is generated by Emacs.
*/
import "../css/index.css";
// import mp3 from "../audio/Just A Gent - Pure Imagination.mp3";
// import { Router } from "./router";
import Mustache from "mustache";
import { storageAvailable, MusicManager } from "./mark";
import { MusicPlayer } from "./player";
import { isScrollable, throttle } from "./misc";

let musicHost = 'http://localhost:8000';

// 音乐播放器上下文
class ExtendedMusicPlayer extends MusicPlayer {

    select(music) {
        if (this.audioCtx) this.audioCtx.close();
        let _this = this;
        this.audio = new Audio();
        this.audio.crossOrigin = "anonymous";
        this.audio.src = musicHost+ music.file;

        this.audio.addEventListener('loadedmetadata', function(event) {
            var musicEnd = document.querySelector('#music-end');
            var progressControl = document.querySelector('input[name=progress]');
            // TODO: 需要格式化时间
            musicEnd.innerText = this.duration;
            progressControl.max = this.duration;
            progressControl.value = 0;
        }, false);

        this.audio.addEventListener('timeupdate', function(event) {
            var progressControl = document.querySelector('input[name=progress]');
            progressControl.value = mplayer.audio.currentTime;
        });

        this.audio.addEventListener('ended', function(event) {
            var spinCover = document.querySelector('.spin');
            spinCover.style.animationPlayState = 'paused';
            mplayer.audio.pause();
            // TODO 在这里加入顺序/随机/单曲播放功能            
            // mplayer.audio.src = musicHost + music.filename;
            // mplayer.audio.load();
            // mplayer.audio.play();
        }, false);

        this.audioCtx = new (window.AudioContext || window.webkitAudioContext);
        this.track = this.audioCtx.createMediaElementSource(this.audio);
        this.gainNode = this.audioCtx.createGain();
        this.track.connect(this.gainNode).connect(this.audioCtx.destination);

        // 渲染播放页面的信息
        let spinCover = document.querySelector('.spin'),
            playingMusic = document.querySelector('#playing-name'),
            playingArtist = document.querySelector('#playing-artist');
        playingMusic.innerText = music.name;
        playingArtist.innerText = music.artist;
        spinCover.src = musicHost + music.cover;
        spinCover.style.animationPlayState = 'running';
    }

}

var mplayer = new ExtendedMusicPlayer();

function main() {
    clickHijack();
    // 主区域滚动事件处理
    let main = document.querySelector('main'),
        scrollFn = throttle(
            function () {
                if (main.scrollTop + main.clientHeight == main.scrollHeight)
                {

                    fetch(musicHost + '/music/list/0/limit/5',
                          {mode: 'cors'})
                        .then(response => {
                            return response.json();
                        })
                        .then(data => {
                            if (data.playlist.length == 0) {
                            } else {
                                playlistRender("#music-content", data);
                                if (data.playlist.length == 0) {
                                    let statusBar = document.querySelector('.status-bar');
                                    statusBar.innerHTML = `<p>当前已加载歌曲共${playlistRender.amount}首, 已经完全加载完毕</p>`;
                                }
                            }
                        });
                }
            }, 500, 1000);

    if (!main.onscroll)
        main.addEventListener('scroll', scrollFn, false);

    // 渲染列表
    
    var data = {
        playlist: [
            {
                id: 1,
                cover: "/path/to/1.png",
                name: 'Tohou',
                artist: '3L'
            },
            {
                id: 2,
                cover: "/path/to/2.png",
                name: 'Tohou',
                artist: '3L'
            }

        ]
    };
    fetch(
        musicHost + '/music/list/0/limit/5',
        {mode: 'cors'})
        .then(response => response.json())
        .then(data => playlistRender('#music-content', data));
    // playlistRender('#music-content', data);

    // 绑定播放器控件
    var volumeControl = document.querySelector('input[name=volume]');

    var progressControl = document.querySelector('input[name=progress]');

    mplayer.bindingUI(volumeControl, 'input', function(event) {
        mplayer.setVolume(event.target.value);
    });

    mplayer.bindingUI(progressControl, 'input', function(event) {
        mplayer.setProgress(event.target.value);
    });
}

// 切换首页和歌曲播放页
var togglePage = (function() {
    let isIndex = true,
        pageIndex = document.querySelector('#index-page'),
        pagePlaying = document.querySelector('#playing-page');

    // playlist.addEventListener('scroll', function(e){
    //     console.log(e.target.scrollTop);
    //     if (e.target.scrollTop > 10) {
    //         e.target.animate([
    //             {
    //                 opacity: 0,
    //             },
    //             {
    //                 opacity: 1
    //             }
    //         ], 200);
    //         statusBar.classList.add('hidden');
    //     }
    // });

    return function(musicId=1) {
        if (isIndex) {
            // TODO: 加个切换动画
            pageIndex.classList.add('hidden');
            pagePlaying.classList.remove('hidden');
            // TODO: 拼接音频路径,并且自动播放
        } else {
            pageIndex.classList.remove('hidden');
            pagePlaying.classList.add('hidden');
        }
        isIndex = !isIndex;
    };
})();

// 拦截部分元素的点击事件
function clickHijack() {
    document.onclick = function(event) {
        event = event || window.event;
        var target = event.target || event.srcElement;
        if (target.onclick) return target.onclick(event);
        if (target.tagName == 'LI' && target.className == 'btn-link') {
            target.onclick = clickBtn(target);
        }
        else if (target.tagName == 'IMG' && target.classList.contains('mcover')) {
            target.onclick = playingBtn(target);
        }
        else if (target.tagName == 'I' && target.classList.contains('icon-back')) {
            togglePage();
        }
        else if (target.className == 'pause') {
            mplayer.pause();
            target.className = 'play';
        }
        else if (target.className == 'play') {
            mplayer.play();
            target.classList = 'pause';
        }
        else if (target.tagName == 'INPUT' &&
                 target.attributes.getNamedItem('name').value == 'progress') {
            target.onclick = function(event) {
                event.cancelBubble = true;
                mplayer.setProgress(target.value);
            };
        }
        else if (target.tagName == 'I' && target.classList.contains('icon-like')) {
            let getItem = (attr) => target.attributes.getNamedItem(attr).value,
                id = parseInt(getItem('data-id')),
                cover = getItem('data-cover'),
                name = getItem('data-name'),
                artist = getItem('data-artist'),
                music = {
                    id, cover, name, artist
                };

            // TODO: 给 liked 的曲添加样式
            MusicManager.addOrRemove(
                music,
                function () {
                    target.classList.add('liked');
                    console.log('adding');
                },
                function () {
                    target.classList.remove('liked');
                    console.log('removing');
                });
        }
        target.onclick && target.onclick(event);
    };
}

// 点击首页的三个按钮
// 歌曲列表 按钮从网络加载数据
// 我的最爱 按钮从 localstorage 加载数据
//
var clickBtn = (function() {
    let prevId = 'music',
        musicListData,
        divFav = document.querySelector('.fav'),
        divRes= document.querySelector('.result'),
        divMusic = document.querySelector('.music');
    return function(target){
        return function(event) {
            event.cancelBubble = true;
            let id = target.id; //target.attributes.getNamedItem('id').value;
            if (!target.classList.contains('active')) {
                target.classList.add('active');
                // 从 localstorage 加载用户的收藏曲目
                switch(id) {
                case 'music':
                    divMusic.classList.remove('hidden');
                    divFav.classList.add('hidden');
                    divRes.classList.add('hidden');
                    break;
                case 'fav':
                    divMusic.classList.add('hidden');
                    divFav.classList.remove('hidden');
                    divRes.classList.add('hidden');
                    playlistRender("#fav-content", { playlist: Array.from(MusicManager.getFavMusic()) }, false);
                    break;
                case 'result':
                    divMusic.classList.add('hidden');
                    divFav.classList.add('hidden');
                    divRes.classList.remove('hidden');
                    break;
                default:
                    console.error('An error has been raised');
                }
            }
            if (prevId && prevId != id) {
                let prevBtn = document.getElementById(prevId);
                prevBtn.classList.remove('active');
            }
            prevId = target.id;
        };
    };
})();

var playingBtn = (function() {
    let prevOne;

    return function (target) {
        return function(event) {
            event.cancelBubble = true;
            if (!prevOne || !target.parentNode.parentNode.classList.contains('active')) {
                // 第一次播放或者切换播放
                if (prevOne) {
                    prevOne.parentNode.parentNode.classList.remove('active');
                }
                let getItem = (attr) => target.attributes.getNamedItem(attr).value,
                    spinCover = document.querySelector('.spin'),
                    id = getItem('data-id'),
                    name = getItem('data-name'),
                    cover = getItem('data-cover'),
                    artist = getItem('data-artist'),
                    file = getItem('data-file'),
                    music = { id, name, cover, artist, file };
                prevOne = target;
                target.parentNode.parentNode.classList.add('active');
                togglePage();
                // TODO: 直接获取渲染时候的歌曲信息,然后拼接播放地址
                // music.id = '../audio/test.mp3';
                mplayer.select(music);
                mplayer.play();
            } else {
                // 点击当前播放的歌曲,直接切换页面
                togglePage();
            }
        }
    };
})();

// 列表渲染,有两种模式,第一种是 append,也就是在原有歌曲列表中插入数据,主要用于渲染 歌曲列表 按钮的结果,以及实现下拉加载功能
// 第二种模式是重新渲染列表主要用于 我的最爱 按钮的结果,目前只考虑到小量的歌曲,所以直接重新加载
var playlistRender = (function(){
    let tplSong = document.querySelector('#song-template').innerText;

    var resFunc = function(rule, data={ playlist: [] }, append=true) {
        let listContent = document.querySelector(rule),
            main = document.querySelector('main'),
            statusBar = document.querySelector(`section[data-tag=${rule.substr(1)}]`),
            rendered = Mustache.render(tplSong, data);
        console.log(data);
        if (append) {
            resFunc.amount.music += data.playlist.length;
            let amount = resFunc.amount.music;
            listContent.insertAdjacentHTML('beforeend', rendered);
            statusBar.innerHTML = "<p>当前已加载歌曲共" + amount + "首</p>";
            if (!isScrollable(main)) {
                statusBar.innerHTML += '<button class="btn-refresh">尝试刷新</button>';
                let btnRefresh = document.querySelector('.btn-refresh');
                btnRefresh.addEventListener('click', function () {
                    fetch(
                        musicHost + `/music/list/${amount}/limit/5`,
                        {mode: 'cors'}).then(response => {
                        return response.json();
                    }).then(data => {
                        if (data.playlist.length == 0) {
                            let statusBar = document.querySelector('.status-bar');
                            statusBar.innerHTML = `<p>当前已加载歌曲共${playlistRender.amount}首, 已经完全加载完毕</p>`;
                        } else {
                            playlistRender(rule, data);
                        }
                    });
                }, false);
            }
        } else {
            listContent.innerHTML = rendered;
            statusBar.innerHTML = "<p>当前收藏歌曲共" + data.playlist.length + "首</p>";
        }
    };
    resFunc.amount = {
        music: 0,
        fav: 0
    };
    return resFunc;
})();

main();

// TODO: 重新编写状态栏的事件
// TODO: 收藏图标的样式以及点击事件
// TODO: 点击按钮时候的切换动画
// TODO: 播放页面的样式,以及点击歌曲时候的事件
// TODO: 搜索功能,编写后端
// TODO: 切换伪元素的 content
// TODO: 添加曲目本地文件夹做为音乐源
// TODO: 手动实现一个前端路由器

MusicManager.clear();
